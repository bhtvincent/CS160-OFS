<?php
/**
 * Refund_apiApiTest
 * PHP version 5
 *
 * @category Class
 * @package  mvrf_100
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * mVisa Refund API
 *
 * Refund API is only applicable if the merchant has accepted payment using mVisa at the time of original purchase. Consumers provides their PAN number associated with initial purchase transaction to merchant, which is used via the merchant device to instruct full or partial amount to be returned to the consumer.
 *
 * OpenAPI spec version: v1
 * Contact: 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace mvrf_100\apitest;

require_once (__DIR__.'/../../../../globalConfig.php');

use \globalConfig\GlobalConfig;

use \mvrf_100\Configuration;
use \mvrf_100\api\Refund_apiApi;

/**
 * Refund_apiApiTest Class Doc Comment
 *
 * @category Class
 * @package  mvrf_100
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Refund_apiApiTest extends \PHPUnit\Framework\TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {

        $gc=new GlobalConfig();
        $config = Configuration::getDefaultConfiguration();

        // Configure HTTP basic authorization
        $config->setUsername($gc->getUserName());
        $config->setPassword($gc->getPassword());
        $config->setCertificatePath($gc->getCertificatePath());
        $config->setPrivateKey($gc->getPrivateKeyPath());

        // Configure API key authorization:
        $config->setSharedSecret($gc->getSharedSecret());
        $config->setApiKey("apikey", $gc->getApiKey());

        // Configure proxy settings
        $config->setCurlProxyHost($gc->getProxyHost());
        $config->setCurlProxyPort($gc->getProxyPort());
        $config->setCurlProxyUser($gc->getProxyUser());
        $config->setCurlProxyPassword($gc->getProxyPassword());

        echo '\n.................Testing Refund_apiApi...........................\n';
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {

    }
    public function transformPayload($oldPayload){
        $payload = $this->editLocalTime($oldPayload);
        $payload = $this->addRandom($payload);
        $payload= json_decode($payload,true);
        return $payload;
    }
    public function editLocalTime($oldPayload){

        date_default_timezone_set("America/Los_Angeles");
        $timestamp = date("Y-m-d\TH:i:s");
        $pattern = '/"localTransactionDateTime":".{19}"/i';
        $replacement = '"localTransactionDateTime": "'.$timestamp.'"';
        $oldPayload = preg_replace($pattern, $replacement, $oldPayload);

        $timestamp = date("mdHis");
        $pattern = '/"dateTimeLocal":".{10}"/i';
        $replacement = '"dateTimeLocal": "'.$timestamp.'"';
        return preg_replace($pattern, $replacement, $oldPayload);

    }
    public function addRandom($oldPayload){
        $pattern = '/random/i';
        $replacement = $this->generateRandomString(5);
        $oldPayload = preg_replace($pattern, $replacement, $oldPayload);

        $pattern = '/random_integer/i';
        return preg_replace($pattern, '1', $oldPayload);
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {

    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {

    }
    function generateRandomString($length = 10)
    {
        $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
        $charactersLength = strlen($characters);
        $randomString = '';
        for ($i = 0; $i < $length; $i++) {
            $randomString .= $characters[rand(0, $charactersLength - 1)];
        }
        return $randomString;
    }

    /**
     * Test case for getmerchandiseReturnGet
     *
     * .
     *
     */
    public function testGetmerchandiseReturnGet()
    {
        echo "\nMaking a call to GetmerchandiseReturnGet()\n";

        $api_instance = new Refund_apiApi;
        $result = $api_instance->GetmerchandiseReturnGet($this->addRandom('random'));

        $this->assertNotNull($result);

    }

    /**
     * Test case for getmerchandiseReturnReversalGet
     *
     * .
     *
     */
    public function testGetmerchandiseReturnReversalGet()
    {
        echo "\nMaking a call to GetmerchandiseReturnReversalGet()\n";

        $api_instance = new Refund_apiApi;
        $result = $api_instance->GetmerchandiseReturnReversalGet($this->addRandom('random'));

        $this->assertNotNull($result);

    }

    /**
     * Test case for postmerchandiseReturnPost
     *
     * .
     *
     */
    public function testPostmerchandiseReturnPost()
    {
        echo "\nMaking a call to PostmerchandiseReturnPost()\n";

        $api_instance = new Refund_apiApi;
        $result = $api_instance->PostmerchandiseReturnPost($this->transformPayload('{"localTransactionDateTime":"2017-02-04T20:08:18","recipientPrimaryAccountNumber":"4761360055652118","merchantCategoryCode":"4829","systemsTraceAuditNumber":"313042","transactionCurrencyCode":"USD","acquirerCountryCode":"643","cardAcceptor":{"idCode":"ID-Code123","name":"Card Accpector ABC","address":{"country":"IND","city":"Bangalore"}},"acquiringBin":"400171","retrievalReferenceNumber":"430000367618","amount":"124.05"}'));

        $this->assertNotNull($result);

    }

    /**
     * Test case for postmerchandiseReturnReversalPost
     *
     * .
     *
     */
    public function testPostmerchandiseReturnReversalPost()
    {
        echo "\nMaking a call to PostmerchandiseReturnReversalPost()\n";

        $api_instance = new Refund_apiApi;
        $result = $api_instance->PostmerchandiseReturnReversalPost($this->transformPayload('{"localTransactionDateTime":"2017-10-23T13:37:31","acquiringBin":"400171","feeProgramIndicator":"aaa","transactionFeeAmt":"2","merchantVerificationValue":{"mvvAcquirerAssigned":"41394644363445313243","mvvVisaAssigned":"41394644363445313243"},"acquirerCountryCode":"643","transactionIdentifier":"443131874411605","cardAcceptor":{"idCode":"VMT200911026070","address":{"county":"kolkata","country":"IND","state":"KO","zipCode":"94404"},"terminalId":"365539","name":"Visa Inc. USA-Foster City"},"originalDataElements":{"acquiringBin":"400171","systemsTraceAuditNumber":"313043","approvalCode":"21324K","transmissionDateTime":"2017-10-23T20:34:16.016"},"recipientPrimaryAccountNumber":"4761360055652118","retrievalReferenceNumber":"430000367611","systemsTraceAuditNumber":"313043","senderCurrencyCode":"USD","amount":"24.01"}'));

        $this->assertNotNull($result);

    }

}
/**
* --------------------------------------------------------------------------------
*
* © Copyright 2018 Visa. All Rights Reserved.
*
* NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
* and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
* rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
*
* By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
* (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
* programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
* THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
* FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
* --------------------------------------------------------------------------------
*/