<?php
/**
 * ReceiveP2MpostResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  rcvs_100
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Receive Side Callback API
 *
 * To facilitate the implementation of mVisa, Visa provides mVisa Receive Side API specifications to clients who implement a set of outbound RESTful APIs (Receive Side APIs) so that Visa can call these APIs to request clients to process the transactions over the Internet.
 *
 * OpenAPI spec version: v1
 * Contact: 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace rcvs_100\model;

use \ArrayAccess;

/**
 * ReceiveP2MpostResponse Class Doc Comment
 *
 * @category    Class
 * @description Response body for Receive Person-to-Merchant API
 * @package     rcvs_100
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ReceiveP2MpostResponse implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'receiveP2MpostResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'merchant_city' => 'string',
        'merchant_category_code' => 'string',
        'fee_program_indicator' => 'string',
        'merchant_name' => 'string',
        'receiver_transaction_id' => 'string',
        'merchant_verification_value' => 'string',
        'merchant_terminal_id' => 'string',
        'merchant_country_code' => 'string',
        'response_code' => 'string',
        'merchant_id' => 'string',
        'auth_id_response' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'merchant_city' => 'merchantCity',
        'merchant_category_code' => 'merchantCategoryCode',
        'fee_program_indicator' => 'feeProgramIndicator',
        'merchant_name' => 'merchantName',
        'receiver_transaction_id' => 'receiverTransactionId',
        'merchant_verification_value' => 'merchantVerificationValue',
        'merchant_terminal_id' => 'merchantTerminalID',
        'merchant_country_code' => 'merchantCountryCode',
        'response_code' => 'responseCode',
        'merchant_id' => 'merchantID',
        'auth_id_response' => 'authIdResponse'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'merchant_city' => 'setMerchantCity',
        'merchant_category_code' => 'setMerchantCategoryCode',
        'fee_program_indicator' => 'setFeeProgramIndicator',
        'merchant_name' => 'setMerchantName',
        'receiver_transaction_id' => 'setReceiverTransactionId',
        'merchant_verification_value' => 'setMerchantVerificationValue',
        'merchant_terminal_id' => 'setMerchantTerminalId',
        'merchant_country_code' => 'setMerchantCountryCode',
        'response_code' => 'setResponseCode',
        'merchant_id' => 'setMerchantId',
        'auth_id_response' => 'setAuthIdResponse'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'merchant_city' => 'getMerchantCity',
        'merchant_category_code' => 'getMerchantCategoryCode',
        'fee_program_indicator' => 'getFeeProgramIndicator',
        'merchant_name' => 'getMerchantName',
        'receiver_transaction_id' => 'getReceiverTransactionId',
        'merchant_verification_value' => 'getMerchantVerificationValue',
        'merchant_terminal_id' => 'getMerchantTerminalId',
        'merchant_country_code' => 'getMerchantCountryCode',
        'response_code' => 'getResponseCode',
        'merchant_id' => 'getMerchantId',
        'auth_id_response' => 'getAuthIdResponse'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['merchant_city'] = isset($data['merchant_city']) ? $data['merchant_city'] : null;
        $this->container['merchant_category_code'] = isset($data['merchant_category_code']) ? $data['merchant_category_code'] : null;
        $this->container['fee_program_indicator'] = isset($data['fee_program_indicator']) ? $data['fee_program_indicator'] : null;
        $this->container['merchant_name'] = isset($data['merchant_name']) ? $data['merchant_name'] : null;
        $this->container['receiver_transaction_id'] = isset($data['receiver_transaction_id']) ? $data['receiver_transaction_id'] : null;
        $this->container['merchant_verification_value'] = isset($data['merchant_verification_value']) ? $data['merchant_verification_value'] : null;
        $this->container['merchant_terminal_id'] = isset($data['merchant_terminal_id']) ? $data['merchant_terminal_id'] : null;
        $this->container['merchant_country_code'] = isset($data['merchant_country_code']) ? $data['merchant_country_code'] : null;
        $this->container['response_code'] = isset($data['response_code']) ? $data['response_code'] : null;
        $this->container['merchant_id'] = isset($data['merchant_id']) ? $data['merchant_id'] : null;
        $this->container['auth_id_response'] = isset($data['auth_id_response']) ? $data['auth_id_response'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['merchant_city'] === null) {
            $invalid_properties[] = "'merchant_city' can't be null";
        }
        if ($this->container['merchant_category_code'] === null) {
            $invalid_properties[] = "'merchant_category_code' can't be null";
        }
        if ($this->container['merchant_name'] === null) {
            $invalid_properties[] = "'merchant_name' can't be null";
        }
        if ($this->container['response_code'] === null) {
            $invalid_properties[] = "'response_code' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['merchant_city'] === null) {
            return false;
        }
        if ($this->container['merchant_category_code'] === null) {
            return false;
        }
        if ($this->container['merchant_name'] === null) {
            return false;
        }
        if ($this->container['response_code'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets merchant_city
     * @return string
     */
    public function getMerchantCity()
    {
        return $this->container['merchant_city'];
    }

    /**
     * Sets merchant_city
     * @param string $merchant_city This is called Card Acceptor Location. Recipient must replace this field with the city name of Merchant. Visa settlement reports would contain the value provided by recipient.<br>If encounter errors or the merchant PAN is invalid/does not belong to the acquirer, the acquirer should send HTTP 200 with decline response code and echo back the same field content sent in the request.
     * @return $this
     */
    public function setMerchantCity($merchant_city)
    {
        $this->container['merchant_city'] = $merchant_city;

        return $this;
    }

    /**
     * Gets merchant_category_code
     * @return string
     */
    public function getMerchantCategoryCode()
    {
        return $this->container['merchant_category_code'];
    }

    /**
     * Sets merchant_category_code
     * @param string $merchant_category_code Recipient should populate the Merchant Category Code (MCC) of the merchant in the response message. If replaced by recipient Visa settlement reports would contain the value provided by recipient. This field accepts only numeric data. If there is non numeric data provided in this field the default '0000' translation will be sent to VisaNet.<br>If encounter errors or the merchant PAN is invalid/does not belong to the acquirer, the acquirer should send HTTP 200 with decline response code and echo back the same field content sent in the request.
     * @return $this
     */
    public function setMerchantCategoryCode($merchant_category_code)
    {
        $this->container['merchant_category_code'] = $merchant_category_code;

        return $this;
    }

    /**
     * Gets fee_program_indicator
     * @return string
     */
    public function getFeeProgramIndicator()
    {
        return $this->container['fee_program_indicator'];
    }

    /**
     * Sets fee_program_indicator
     * @param string $fee_program_indicator Optional field which may be populated by recipient where applicable. This field is to be sent as NULL if it is not populated.
     * @return $this
     */
    public function setFeeProgramIndicator($fee_program_indicator)
    {
        $this->container['fee_program_indicator'] = $fee_program_indicator;

        return $this;
    }

    /**
     * Gets merchant_name
     * @return string
     */
    public function getMerchantName()
    {
        return $this->container['merchant_name'];
    }

    /**
     * Sets merchant_name
     * @param string $merchant_name This is called Card Acceptor Name in the VisaNet Specifications. Recipient must replace this field with the ‘doing business as’ name of Merchant. Visa settlement reports would contain the value provided by recipient.<br>If encounter errors or the merchant PAN is invalid/does not belong to the acquirer, the acquirer should send HTTP 200 with decline response code and echo back the same field content sent in the request.
     * @return $this
     */
    public function setMerchantName($merchant_name)
    {
        $this->container['merchant_name'] = $merchant_name;

        return $this;
    }

    /**
     * Gets receiver_transaction_id
     * @return string
     */
    public function getReceiverTransactionId()
    {
        return $this->container['receiver_transaction_id'];
    }

    /**
     * Sets receiver_transaction_id
     * @param string $receiver_transaction_id Acquirer may provide a transaction ID that can be used for investigation if required. This field is to be sent as NULL if it is not populated
     * @return $this
     */
    public function setReceiverTransactionId($receiver_transaction_id)
    {
        $this->container['receiver_transaction_id'] = $receiver_transaction_id;

        return $this;
    }

    /**
     * Gets merchant_verification_value
     * @return string
     */
    public function getMerchantVerificationValue()
    {
        return $this->container['merchant_verification_value'];
    }

    /**
     * Sets merchant_verification_value
     * @param string $merchant_verification_value Recipient are expected to populate the Merchant Verification Value used to identify merchants that participate in a variety of programs in this field. This field is to be sent as NULL if it is not populated.
     * @return $this
     */
    public function setMerchantVerificationValue($merchant_verification_value)
    {
        $this->container['merchant_verification_value'] = $merchant_verification_value;

        return $this;
    }

    /**
     * Gets merchant_terminal_id
     * @return string
     */
    public function getMerchantTerminalId()
    {
        return $this->container['merchant_terminal_id'];
    }

    /**
     * Sets merchant_terminal_id
     * @param string $merchant_terminal_id <b>Conditional</b>. Recipient may replace this field with card acceptor terminal ID as defined in recipient system. If replaced by recipient, all occurrences of card acceptor terminal ID in reports, files, transaction inquiries, etc. will contain the value provided by the recipient. This field is to be sent as NULL if it is not populated.
     * @return $this
     */
    public function setMerchantTerminalId($merchant_terminal_id)
    {
        $this->container['merchant_terminal_id'] = $merchant_terminal_id;

        return $this;
    }

    /**
     * Gets merchant_country_code
     * @return string
     */
    public function getMerchantCountryCode()
    {
        return $this->container['merchant_country_code'];
    }

    /**
     * Sets merchant_country_code
     * @param string $merchant_country_code <b>Conditional</b>. Recipient may replace this field with the 2-letter ISO 3166 country code of the merchant, if the country code of recipient is different than originator. Visa settlement reports would contain the value provided by recipient. This field is to be sent as NULL if it is not populated.
     * @return $this
     */
    public function setMerchantCountryCode($merchant_country_code)
    {
        $this->container['merchant_country_code'] = $merchant_country_code;

        return $this;
    }

    /**
     * Gets response_code
     * @return string
     */
    public function getResponseCode()
    {
        return $this->container['response_code'];
    }

    /**
     * Sets response_code
     * @param string $response_code Contains a code (also known as 'Action Code') that defines the response to a request. Refer to actionCode
     * @return $this
     */
    public function setResponseCode($response_code)
    {
        $this->container['response_code'] = $response_code;

        return $this;
    }

    /**
     * Gets merchant_id
     * @return string
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     * @param string $merchant_id <b>Conditional</b>. Recipient may replace this field with card acceptor ID code of the merchant as defined in recipient system. If replaced by recipient, all occurrences of card acceptor ID code in reports, files, transaction inquiries, etc. will contain the value provided by the recipient. This field is to be sent as NULL if it is not populated.
     * @return $this
     */
    public function setMerchantId($merchant_id)
    {
        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }

    /**
     * Gets auth_id_response
     * @return string
     */
    public function getAuthIdResponse()
    {
        return $this->container['auth_id_response'];
    }

    /**
     * Sets auth_id_response
     * @param string $auth_id_response Contains the authorization code provided by the recipient when a transaction is approved. Visa recommends that recipient maintains uniqueness of this code for a given merchant PAN, however Visa would not maintain any checks for uniqueness. This field is to be sent as NULL if it is not populated.
     * @return $this
     */
    public function setAuthIdResponse($auth_id_response)
    {
        $this->container['auth_id_response'] = $auth_id_response;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\rcvs_100\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\rcvs_100\ObjectSerializer::sanitizeForSerialization($this));
    }
}

/**
* ----------------------------------------------------------------------------------------------------------------------
*
* © Copyright 2018 Visa. All Rights Reserved.
*
* NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
* and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
* rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
*
* By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
* (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
* programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
* THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
* FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
* ----------------------------------------------------------------------------------------------------------------------
*/