<?php
/**
 * ReceiveP2MAdvicepostPayload
 *
 * PHP version 5
 *
 * @category Class
 * @package  rcvs_100
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Receive Side Callback API
 *
 * To facilitate the implementation of mVisa, Visa provides mVisa Receive Side API specifications to clients who implement a set of outbound RESTful APIs (Receive Side APIs) so that Visa can call these APIs to request clients to process the transactions over the Internet.
 *
 * OpenAPI spec version: v1
 * Contact: 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace rcvs_100\model;

use \ArrayAccess;

/**
 * ReceiveP2MAdvicepostPayload Class Doc Comment
 *
 * @category    Class
 * @description Request body for Receive Person-to-Merchant Advice API
 * @package     rcvs_100
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ReceiveP2MAdvicepostPayload implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'receiveP2MAdvicepostPayload';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'bill_id_format' => 'string',
        'decimal_position_indicator' => 'string',
        'retrieval_reference_number' => 'string',
        'message_type' => 'string',
        'auth_id_response' => 'string',
        'originator_country_code' => 'string',
        'bill_id' => 'string',
        'local_transaction_date' => 'string',
        'transmission_date_time' => 'string',
        'transaction_fee_amount' => 'string',
        'transaction_currency_code' => 'string',
        'enc_merchant_pan' => 'string',
        'system_trace_audit_number' => 'string',
        'velocity_limit_indicator' => 'string',
        'enc_consumer_name' => 'string',
        'originator_bin' => 'string',
        'rejection_code' => 'string',
        'transaction_amount' => 'string',
        'local_transaction_time' => 'string',
        'enc_consumer_pan' => 'string',
        'response_code' => 'string',
        'visa_transaction_id' => 'string',
        'ref_id' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'bill_id_format' => 'billIdFormat',
        'decimal_position_indicator' => 'decimalPositionIndicator',
        'retrieval_reference_number' => 'retrievalReferenceNumber',
        'message_type' => 'messageType',
        'auth_id_response' => 'authIdResponse',
        'originator_country_code' => 'originatorCountryCode',
        'bill_id' => 'billId',
        'local_transaction_date' => 'localTransactionDate',
        'transmission_date_time' => 'transmissionDateTime',
        'transaction_fee_amount' => 'transactionFeeAmount',
        'transaction_currency_code' => 'transactionCurrencyCode',
        'enc_merchant_pan' => 'encMerchantPAN',
        'system_trace_audit_number' => 'systemTraceAuditNumber',
        'velocity_limit_indicator' => 'velocityLimitIndicator',
        'enc_consumer_name' => 'encConsumerName',
        'originator_bin' => 'originatorBIN',
        'rejection_code' => 'rejectionCode',
        'transaction_amount' => 'transactionAmount',
        'local_transaction_time' => 'localTransactionTime',
        'enc_consumer_pan' => 'encConsumerPAN',
        'response_code' => 'responseCode',
        'visa_transaction_id' => 'visaTransactionId',
        'ref_id' => 'refId'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'bill_id_format' => 'setBillIdFormat',
        'decimal_position_indicator' => 'setDecimalPositionIndicator',
        'retrieval_reference_number' => 'setRetrievalReferenceNumber',
        'message_type' => 'setMessageType',
        'auth_id_response' => 'setAuthIdResponse',
        'originator_country_code' => 'setOriginatorCountryCode',
        'bill_id' => 'setBillId',
        'local_transaction_date' => 'setLocalTransactionDate',
        'transmission_date_time' => 'setTransmissionDateTime',
        'transaction_fee_amount' => 'setTransactionFeeAmount',
        'transaction_currency_code' => 'setTransactionCurrencyCode',
        'enc_merchant_pan' => 'setEncMerchantPan',
        'system_trace_audit_number' => 'setSystemTraceAuditNumber',
        'velocity_limit_indicator' => 'setVelocityLimitIndicator',
        'enc_consumer_name' => 'setEncConsumerName',
        'originator_bin' => 'setOriginatorBin',
        'rejection_code' => 'setRejectionCode',
        'transaction_amount' => 'setTransactionAmount',
        'local_transaction_time' => 'setLocalTransactionTime',
        'enc_consumer_pan' => 'setEncConsumerPan',
        'response_code' => 'setResponseCode',
        'visa_transaction_id' => 'setVisaTransactionId',
        'ref_id' => 'setRefId'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'bill_id_format' => 'getBillIdFormat',
        'decimal_position_indicator' => 'getDecimalPositionIndicator',
        'retrieval_reference_number' => 'getRetrievalReferenceNumber',
        'message_type' => 'getMessageType',
        'auth_id_response' => 'getAuthIdResponse',
        'originator_country_code' => 'getOriginatorCountryCode',
        'bill_id' => 'getBillId',
        'local_transaction_date' => 'getLocalTransactionDate',
        'transmission_date_time' => 'getTransmissionDateTime',
        'transaction_fee_amount' => 'getTransactionFeeAmount',
        'transaction_currency_code' => 'getTransactionCurrencyCode',
        'enc_merchant_pan' => 'getEncMerchantPan',
        'system_trace_audit_number' => 'getSystemTraceAuditNumber',
        'velocity_limit_indicator' => 'getVelocityLimitIndicator',
        'enc_consumer_name' => 'getEncConsumerName',
        'originator_bin' => 'getOriginatorBin',
        'rejection_code' => 'getRejectionCode',
        'transaction_amount' => 'getTransactionAmount',
        'local_transaction_time' => 'getLocalTransactionTime',
        'enc_consumer_pan' => 'getEncConsumerPan',
        'response_code' => 'getResponseCode',
        'visa_transaction_id' => 'getVisaTransactionId',
        'ref_id' => 'getRefId'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['bill_id_format'] = isset($data['bill_id_format']) ? $data['bill_id_format'] : null;
        $this->container['decimal_position_indicator'] = isset($data['decimal_position_indicator']) ? $data['decimal_position_indicator'] : null;
        $this->container['retrieval_reference_number'] = isset($data['retrieval_reference_number']) ? $data['retrieval_reference_number'] : null;
        $this->container['message_type'] = isset($data['message_type']) ? $data['message_type'] : null;
        $this->container['auth_id_response'] = isset($data['auth_id_response']) ? $data['auth_id_response'] : null;
        $this->container['originator_country_code'] = isset($data['originator_country_code']) ? $data['originator_country_code'] : null;
        $this->container['bill_id'] = isset($data['bill_id']) ? $data['bill_id'] : null;
        $this->container['local_transaction_date'] = isset($data['local_transaction_date']) ? $data['local_transaction_date'] : null;
        $this->container['transmission_date_time'] = isset($data['transmission_date_time']) ? $data['transmission_date_time'] : null;
        $this->container['transaction_fee_amount'] = isset($data['transaction_fee_amount']) ? $data['transaction_fee_amount'] : null;
        $this->container['transaction_currency_code'] = isset($data['transaction_currency_code']) ? $data['transaction_currency_code'] : null;
        $this->container['enc_merchant_pan'] = isset($data['enc_merchant_pan']) ? $data['enc_merchant_pan'] : null;
        $this->container['system_trace_audit_number'] = isset($data['system_trace_audit_number']) ? $data['system_trace_audit_number'] : null;
        $this->container['velocity_limit_indicator'] = isset($data['velocity_limit_indicator']) ? $data['velocity_limit_indicator'] : null;
        $this->container['enc_consumer_name'] = isset($data['enc_consumer_name']) ? $data['enc_consumer_name'] : null;
        $this->container['originator_bin'] = isset($data['originator_bin']) ? $data['originator_bin'] : null;
        $this->container['rejection_code'] = isset($data['rejection_code']) ? $data['rejection_code'] : null;
        $this->container['transaction_amount'] = isset($data['transaction_amount']) ? $data['transaction_amount'] : null;
        $this->container['local_transaction_time'] = isset($data['local_transaction_time']) ? $data['local_transaction_time'] : null;
        $this->container['enc_consumer_pan'] = isset($data['enc_consumer_pan']) ? $data['enc_consumer_pan'] : null;
        $this->container['response_code'] = isset($data['response_code']) ? $data['response_code'] : null;
        $this->container['visa_transaction_id'] = isset($data['visa_transaction_id']) ? $data['visa_transaction_id'] : null;
        $this->container['ref_id'] = isset($data['ref_id']) ? $data['ref_id'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['decimal_position_indicator'] === null) {
            $invalid_properties[] = "'decimal_position_indicator' can't be null";
        }
        if ($this->container['retrieval_reference_number'] === null) {
            $invalid_properties[] = "'retrieval_reference_number' can't be null";
        }
        if ($this->container['message_type'] === null) {
            $invalid_properties[] = "'message_type' can't be null";
        }
        if ($this->container['originator_country_code'] === null) {
            $invalid_properties[] = "'originator_country_code' can't be null";
        }
        if ($this->container['local_transaction_date'] === null) {
            $invalid_properties[] = "'local_transaction_date' can't be null";
        }
        if ($this->container['transmission_date_time'] === null) {
            $invalid_properties[] = "'transmission_date_time' can't be null";
        }
        if ($this->container['transaction_currency_code'] === null) {
            $invalid_properties[] = "'transaction_currency_code' can't be null";
        }
        if ($this->container['enc_merchant_pan'] === null) {
            $invalid_properties[] = "'enc_merchant_pan' can't be null";
        }
        if ($this->container['system_trace_audit_number'] === null) {
            $invalid_properties[] = "'system_trace_audit_number' can't be null";
        }
        if ($this->container['enc_consumer_name'] === null) {
            $invalid_properties[] = "'enc_consumer_name' can't be null";
        }
        if ($this->container['originator_bin'] === null) {
            $invalid_properties[] = "'originator_bin' can't be null";
        }
        if ($this->container['rejection_code'] === null) {
            $invalid_properties[] = "'rejection_code' can't be null";
        }
        if ($this->container['transaction_amount'] === null) {
            $invalid_properties[] = "'transaction_amount' can't be null";
        }
        if ($this->container['local_transaction_time'] === null) {
            $invalid_properties[] = "'local_transaction_time' can't be null";
        }
        if ($this->container['enc_consumer_pan'] === null) {
            $invalid_properties[] = "'enc_consumer_pan' can't be null";
        }
        if ($this->container['response_code'] === null) {
            $invalid_properties[] = "'response_code' can't be null";
        }
        if ($this->container['visa_transaction_id'] === null) {
            $invalid_properties[] = "'visa_transaction_id' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['decimal_position_indicator'] === null) {
            return false;
        }
        if ($this->container['retrieval_reference_number'] === null) {
            return false;
        }
        if ($this->container['message_type'] === null) {
            return false;
        }
        if ($this->container['originator_country_code'] === null) {
            return false;
        }
        if ($this->container['local_transaction_date'] === null) {
            return false;
        }
        if ($this->container['transmission_date_time'] === null) {
            return false;
        }
        if ($this->container['transaction_currency_code'] === null) {
            return false;
        }
        if ($this->container['enc_merchant_pan'] === null) {
            return false;
        }
        if ($this->container['system_trace_audit_number'] === null) {
            return false;
        }
        if ($this->container['enc_consumer_name'] === null) {
            return false;
        }
        if ($this->container['originator_bin'] === null) {
            return false;
        }
        if ($this->container['rejection_code'] === null) {
            return false;
        }
        if ($this->container['transaction_amount'] === null) {
            return false;
        }
        if ($this->container['local_transaction_time'] === null) {
            return false;
        }
        if ($this->container['enc_consumer_pan'] === null) {
            return false;
        }
        if ($this->container['response_code'] === null) {
            return false;
        }
        if ($this->container['visa_transaction_id'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets bill_id_format
     * @return string
     */
    public function getBillIdFormat()
    {
        return $this->container['bill_id_format'];
    }

    /**
     * Sets bill_id_format
     * @param string $bill_id_format <b>Conditional</b>. Populate <b>0</b> (Primary ID, as defined by mVisa)<br>This field will be sent as NULL if it is not populated.
     * @return $this
     */
    public function setBillIdFormat($bill_id_format)
    {
        $this->container['bill_id_format'] = $bill_id_format;

        return $this;
    }

    /**
     * Gets decimal_position_indicator
     * @return string
     */
    public function getDecimalPositionIndicator()
    {
        return $this->container['decimal_position_indicator'];
    }

    /**
     * Sets decimal_position_indicator
     * @param string $decimal_position_indicator Indicates the number of decimal positions following the amount field. This field is to be sent as NULL if it is not populated.
     * @return $this
     */
    public function setDecimalPositionIndicator($decimal_position_indicator)
    {
        $this->container['decimal_position_indicator'] = $decimal_position_indicator;

        return $this;
    }

    /**
     * Gets retrieval_reference_number
     * @return string
     */
    public function getRetrievalReferenceNumber()
    {
        return $this->container['retrieval_reference_number'];
    }

    /**
     * Sets retrieval_reference_number
     * @param string $retrieval_reference_number Numeric. It is a key data element for matching a message to others within a given transaction set. The same number appears in all related messages: response, advice, reversal, chargeback, chargeback reversal, or representment. The format is recommended to be <b>ydddhhnnnnnn</b>.
     * @return $this
     */
    public function setRetrievalReferenceNumber($retrieval_reference_number)
    {
        $this->container['retrieval_reference_number'] = $retrieval_reference_number;

        return $this;
    }

    /**
     * Gets message_type
     * @return string
     */
    public function getMessageType()
    {
        return $this->container['message_type'];
    }

    /**
     * Sets message_type
     * @param string $message_type Possible values based on Message Type Identifier are:<br><ul><li>0200 : 'Recipient Timeout'</li><li>0220 : 'Advice' (STIP decline advice)</li><li>0210 : 'Reject' (VIP reject)</li></ul>
     * @return $this
     */
    public function setMessageType($message_type)
    {
        $this->container['message_type'] = $message_type;

        return $this;
    }

    /**
     * Gets auth_id_response
     * @return string
     */
    public function getAuthIdResponse()
    {
        return $this->container['auth_id_response'];
    }

    /**
     * Sets auth_id_response
     * @param string $auth_id_response Contains the authorization code provided by the recipient when a transaction is approved. Visa recommends that recipient maintains uniqueness of this code for a given merchant PAN, however Visa would not maintain any checks for uniqueness. This field is to be sent as NULL if it is not populated.
     * @return $this
     */
    public function setAuthIdResponse($auth_id_response)
    {
        $this->container['auth_id_response'] = $auth_id_response;

        return $this;
    }

    /**
     * Gets originator_country_code
     * @return string
     */
    public function getOriginatorCountryCode()
    {
        return $this->container['originator_country_code'];
    }

    /**
     * Sets originator_country_code
     * @param string $originator_country_code A 3-digit ISO-4217 code that identifies the country of the originating BIN.<br>Refer to <a href=\"/request_response_codes#iso_country_codes\">ISO codes</a>.
     * @return $this
     */
    public function setOriginatorCountryCode($originator_country_code)
    {
        $this->container['originator_country_code'] = $originator_country_code;

        return $this;
    }

    /**
     * Gets bill_id
     * @return string
     */
    public function getBillId()
    {
        return $this->container['bill_id'];
    }

    /**
     * Sets bill_id
     * @param string $bill_id <b>Conditional</b>. This is the invoice number or some other reference for billing purposes. This field will be sent as NULL if it is not populated.
     * @return $this
     */
    public function setBillId($bill_id)
    {
        $this->container['bill_id'] = $bill_id;

        return $this;
    }

    /**
     * Gets local_transaction_date
     * @return string
     */
    public function getLocalTransactionDate()
    {
        return $this->container['local_transaction_date'];
    }

    /**
     * Sets local_transaction_date
     * @param string $local_transaction_date It contains the local month and day on which the transaction was originated. The date is in mmdd format.
     * @return $this
     */
    public function setLocalTransactionDate($local_transaction_date)
    {
        $this->container['local_transaction_date'] = $local_transaction_date;

        return $this;
    }

    /**
     * Gets transmission_date_time
     * @return string
     */
    public function getTransmissionDateTime()
    {
        return $this->container['transmission_date_time'];
    }

    /**
     * Sets transmission_date_time
     * @param string $transmission_date_time The date and time the request was submitted to Visa. Format: MMDDhhmmss.
     * @return $this
     */
    public function setTransmissionDateTime($transmission_date_time)
    {
        $this->container['transmission_date_time'] = $transmission_date_time;

        return $this;
    }

    /**
     * Gets transaction_fee_amount
     * @return string
     */
    public function getTransactionFeeAmount()
    {
        return $this->container['transaction_fee_amount'];
    }

    /**
     * Sets transaction_fee_amount
     * @param string $transaction_fee_amount <b>Conditional</b>. In certain case the merchant display information could contain convenience fee applicable to the transaction. Originators are required to populate convenience fee amount in this field, if presented by merchant. This field will be sent as NULL if it is not populated.
     * @return $this
     */
    public function setTransactionFeeAmount($transaction_fee_amount)
    {
        $this->container['transaction_fee_amount'] = $transaction_fee_amount;

        return $this;
    }

    /**
     * Gets transaction_currency_code
     * @return string
     */
    public function getTransactionCurrencyCode()
    {
        return $this->container['transaction_currency_code'];
    }

    /**
     * Sets transaction_currency_code
     * @param string $transaction_currency_code The 3-digit ISO-4217 code in this field reflects the currency associated to the transactionAmount field.
     * @return $this
     */
    public function setTransactionCurrencyCode($transaction_currency_code)
    {
        $this->container['transaction_currency_code'] = $transaction_currency_code;

        return $this;
    }

    /**
     * Gets enc_merchant_pan
     * @return string
     */
    public function getEncMerchantPan()
    {
        return $this->container['enc_merchant_pan'];
    }

    /**
     * Sets enc_merchant_pan
     * @param string $enc_merchant_pan Merchant PAN. This is a 16-digit PAN. The field is sent in encrypted format using the AES GCM (i.e. Advanced Encryption Standard (AES) in Galois/Counter Mode (GCM)) algorithm for JSON Web Encryption (JWE) objects with 256-bit key (i.e. the shared secret between Visa and client for encryption and decryption of payload data). The field data type will be string(16-19) after decryption.
     * @return $this
     */
    public function setEncMerchantPan($enc_merchant_pan)
    {
        $this->container['enc_merchant_pan'] = $enc_merchant_pan;

        return $this;
    }

    /**
     * Gets system_trace_audit_number
     * @return string
     */
    public function getSystemTraceAuditNumber()
    {
        return $this->container['system_trace_audit_number'];
    }

    /**
     * Sets system_trace_audit_number
     * @param string $system_trace_audit_number Numeric. It is a key data element used to match a response to its request or to match a message to others for a given transaction.
     * @return $this
     */
    public function setSystemTraceAuditNumber($system_trace_audit_number)
    {
        $this->container['system_trace_audit_number'] = $system_trace_audit_number;

        return $this;
    }

    /**
     * Gets velocity_limit_indicator
     * @return string
     */
    public function getVelocityLimitIndicator()
    {
        return $this->container['velocity_limit_indicator'];
    }

    /**
     * Sets velocity_limit_indicator
     * @param string $velocity_limit_indicator <b>Conditional</b>. This field contains the velocity limit related information that Acquirer can use in making the authorization decision:<ul><li>1 = 1-day count or amount exceeded.</li><li>2 = 7-day count or amount exceeded.</li><li>3 = 30-day count or amount exceeded.</li></ul>The field is populated with priority of 1, 2 and then 3.<br>This field is sent if recipient has opted for VisaNet to forward them the OCT when a velocity limit has been exceeded.<br>This field will be sent as NULL if it is not populated.
     * @return $this
     */
    public function setVelocityLimitIndicator($velocity_limit_indicator)
    {
        $this->container['velocity_limit_indicator'] = $velocity_limit_indicator;

        return $this;
    }

    /**
     * Gets enc_consumer_name
     * @return string
     */
    public function getEncConsumerName()
    {
        return $this->container['enc_consumer_name'];
    }

    /**
     * Sets enc_consumer_name
     * @param string $enc_consumer_name Consumer name. If consumer name is greater than 30 characters, then only first 30 characters will be expected. The field is sent in encrypted format using the AES GCM (i.e. Advanced Encryption Standard (AES) in Galois/Counter Mode (GCM)) algorithm for JSON Web Encryption (JWE) objects with 256-bit key (i.e. the shared secret between Visa and client for encryption and decryption of payload data).
     * @return $this
     */
    public function setEncConsumerName($enc_consumer_name)
    {
        $this->container['enc_consumer_name'] = $enc_consumer_name;

        return $this;
    }

    /**
     * Gets originator_bin
     * @return string
     */
    public function getOriginatorBin()
    {
        return $this->container['originator_bin'];
    }

    /**
     * Sets originator_bin
     * @param string $originator_bin This BIN number identifies the originator of merchant payment transaction.
     * @return $this
     */
    public function setOriginatorBin($originator_bin)
    {
        $this->container['originator_bin'] = $originator_bin;

        return $this;
    }

    /**
     * Gets rejection_code
     * @return string
     */
    public function getRejectionCode()
    {
        return $this->container['rejection_code'];
    }

    /**
     * Sets rejection_code
     * @param string $rejection_code Only populated if Advice message type is ‘Reject’. This field contains the VisaNet rejection code.
     * @return $this
     */
    public function setRejectionCode($rejection_code)
    {
        $this->container['rejection_code'] = $rejection_code;

        return $this;
    }

    /**
     * Gets transaction_amount
     * @return string
     */
    public function getTransactionAmount()
    {
        return $this->container['transaction_amount'];
    }

    /**
     * Sets transaction_amount
     * @param string $transaction_amount Transaction amount in merchant currency. The value in this field includes tip or convenience fees, if applicable.
     * @return $this
     */
    public function setTransactionAmount($transaction_amount)
    {
        $this->container['transaction_amount'] = $transaction_amount;

        return $this;
    }

    /**
     * Gets local_transaction_time
     * @return string
     */
    public function getLocalTransactionTime()
    {
        return $this->container['local_transaction_time'];
    }

    /**
     * Sets local_transaction_time
     * @param string $local_transaction_time The time the transaction takes place, expressed in the local time of the originator. The time is in hhmmss format.
     * @return $this
     */
    public function setLocalTransactionTime($local_transaction_time)
    {
        $this->container['local_transaction_time'] = $local_transaction_time;

        return $this;
    }

    /**
     * Gets enc_consumer_pan
     * @return string
     */
    public function getEncConsumerPan()
    {
        return $this->container['enc_consumer_pan'];
    }

    /**
     * Sets enc_consumer_pan
     * @param string $enc_consumer_pan Consumer PAN. This is a 16-digit PAN. The field is sent in encrypted format using the AES GCM (i.e. Advanced Encryption Standard (AES) in Galois/Counter Mode (GCM)) algorithm for JSON Web Encryption (JWE) objects with 256-bit key (i.e. the shared secret between Visa and client for encryption and decryption of payload data). The field data type will be string(16-19) after decryption.
     * @return $this
     */
    public function setEncConsumerPan($enc_consumer_pan)
    {
        $this->container['enc_consumer_pan'] = $enc_consumer_pan;

        return $this;
    }

    /**
     * Gets response_code
     * @return string
     */
    public function getResponseCode()
    {
        return $this->container['response_code'];
    }

    /**
     * Sets response_code
     * @param string $response_code Contains a code (also known as 'Action Code') that defines the response to a request. Refer to actionCode
     * @return $this
     */
    public function setResponseCode($response_code)
    {
        $this->container['response_code'] = $response_code;

        return $this;
    }

    /**
     * Gets visa_transaction_id
     * @return string
     */
    public function getVisaTransactionId()
    {
        return $this->container['visa_transaction_id'];
    }

    /**
     * Sets visa_transaction_id
     * @param string $visa_transaction_id Numeric. It contains a right-justified, VisaNet generated Transaction Identifier (TID) that is unique for each request. The identifier links original messages to subsequent messages, such as those for exception item processing and clearing record.
     * @return $this
     */
    public function setVisaTransactionId($visa_transaction_id)
    {
        $this->container['visa_transaction_id'] = $visa_transaction_id;

        return $this;
    }

    /**
     * Gets ref_id
     * @return string
     */
    public function getRefId()
    {
        return $this->container['ref_id'];
    }

    /**
     * Sets ref_id
     * @param string $ref_id <b>Conditional</b>. This field is sent if it is reflected in the merchant information display. It will otherwise be sent as NULL if it is not populated.
     * @return $this
     */
    public function setRefId($ref_id)
    {
        $this->container['ref_id'] = $ref_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\rcvs_100\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\rcvs_100\ObjectSerializer::sanitizeForSerialization($this));
    }
}

/**
* ----------------------------------------------------------------------------------------------------------------------
*
* © Copyright 2018 Visa. All Rights Reserved.
*
* NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
* and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
* rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
*
* By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
* (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
* programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
* THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
* FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
* ----------------------------------------------------------------------------------------------------------------------
*/